# Configuration master file for mrhttpd 2.7.1
#
# This file is read at compile time, NOT at run time
# The file is sourced by bash. Note that bash does not accept whitespaces
# on either side of the "equal" character
#
# Martin Rogge 2007-2021

# SYSTEM_USER is a fundamental security setting. 
# mrhttpd will fall back on this user account and its user group.
#
# Note: mrhttpd need not be started as root if it is configured 
# to listen on a non-privileged port. If it is started as root,
# you should specify a user account in SYSTEM_USER that has 
# restricted authorization rights.
#
# [optional, functionality not compiled in if missing]

#SYSTEM_USER=http

# PATH_PREFIX is a string expected at the beginning of every valid resource path.
#
# [optional, functionality not compiled in if missing]

#PATH_PREFIX=/fs

# SERVER_PORT defines the TCP port the server is listening on.
#
# [optional, default is 8080]

SERVER_PORT=8080

# SERVER_ROOT is a fundamental security setting. 
# It defines the chroot jail in which the server operates. 
# This also applies to the file(1) binary and CGI scripts. 
# As a consequence all required binaries, libraries and configuration
# files must be available in the chroot environment.
# This is harder than it sounds.
#
# NOTE: most paths defined in this file are relative to SERVER_ROOT.
#
# [optional, functionality not compiled in if missing]

SERVER_ROOT=/opt/mrhttpd

# BIN_DIR defines the installation directory for the binary.
#
# NOTE: This is the only directory NOT relative to SERVER_ROOT.
#
# [optional, default is /usr/local/sbin]

BIN_DIR=/usr/local/bin

# PRIVATE_DIR defines the root directory for internal files.
# At this point, the internal files are only the HTTP error pages.
#
# NOTE: the path is relative to SERVER_ROOT.
#
# [optional, functionality not compiled in if missing]

PRIVATE_DIR=/private

# PUBLIC_DIR defines the root directory for public files.
#
# NOTE: the path is relative to SERVER_ROOT.
#
# [mandatory]

PUBLIC_DIR=/public

# CGI_DIR defines the root directory for CGI scripts.
#
# NOTE: the path is relative to SERVER_ROOT.
#
# [only required if CGI_PATH is set]

#CGI_DIR=/cgi-bin

# CGI_PATH defines the URL path prefix that indicates a CGI script.
#
# [optional, CGI functionality not compiled in if missing]

#CGI_PATH=/cgi-bin

# PUT_PATH defines the URL path prefix and the base directory for uploads.
#
# NOTE: the base directory is relative to PUBLIC_DIR.
#
# [optional, functionality not compiled in if missing]

PUT_PATH=/fs/files

# DEFAULT_INDEX defines the name of the default file in a directory.
# mrhttpd will serve this file if no file name is specified in the URL.
#
# [optional, functionality not compiled in if missing]

DEFAULT_INDEX=index.html

# AUTO_INDEX controls whether the server will generate directory
# listings in JSON format. 
#
# Note: a default index will take precedence over auto index generation
#
# [optional, functionality disabled if missing]

AUTO_INDEX=1

# PRAGMA defines a Pragma parameter that is added to each HTTP reply. 
# Typically set to "no-cache" if proxy and frontend caching is 
# to be suppressed.
#
# [optional, functionality not compiled in if missing]

#PRAGMA=no-cache

# LOG_LEVEL determines the amount of information saved in the log file.
# Note: the higher the level the more code is generated.
#
# LOG_LEVEL=0: no log entries are created
# LOG_LEVEL=1: additionally, all rejected requests are logged
# LOG_LEVEL=2: additionally, all accepted requests are logged
# LOG_LEVEL=3: additionally, every unsuccessful reply is logged
# LOG_LEVEL=4: additionally, every successful reply is logged
#
# [optional, default is 0]

LOG_LEVEL=0

# LOG_FILE defines the file name used for saving the logs.
#
# NOTE: when missing, logs are printed to stdout
#
# NOTE: the path is relative to SERVER_ROOT.
#
# [optional, only used if LOG_LEVEL is greater than 0, or when debugging]

#LOG_FILE=/tmp/mrhttpd.log

# EXT_FILE_CMD points to the file(1) binary.
# The file(1) binary is used for the detection of the mime type of
# those static files that have no recognized suffix.
# The mime type detection via suffix always takes precedence due to 
# its performance advantage.
#
# NOTE: the path is relative to SERVER_ROOT.
#
# [optional, functionality not compiled in if missing]

#EXT_FILE_CMD=/bin/file

# USE_SENDFILE chooses which implementation is chosen for sending files.
#
# USE_SENDFILE=0: a user space routine will read the file and send it
# USE_SENDFILE=1: the Linux kernel function sendfile() is used
#
# Background: on Linux systems, using the kernel function sendfile() 
# promises better performance and lower cpu load. If you want to use 
# the user space routine instead, or if you compile the server for 
# another operating system, use USE_SENDFILE=0.
#
# [optional, default depends on operating system]

#USE_SENDFILE=0

# DETACH controls whether the server should send itself into the
# background when it starts.
#
# You would always want to do that, unless in a Docker container.
#
# [optional, defaults to 1]

DETACH=0

# HTTP_HEADER_LENGTH defines the size of the internal HTTP header buffer.
#
# Note: the server will try to internalize as many headers as possible
# from the HTTP request. Hence the setting is largely irrelevant.
#
# [optional, defaults to 2048]

#HTTP_HEADER_LENGTH=2048

# AUTH_HEADER defines the authorisation header required for certain requests.
# Typically used for Basic Auth. The server will send a WWW-Authenticate header
# in case the Authorisation header is missing for a protected resource.
#
# NOTE: this variable can be injected via the environment
#
# [optional, functionality not compiled in if missing]

#AUTH_HEADER="Basic dGVzdDp0ZXN0"

# AUTH_METHODS defines for which HTTP methods an authorisation header is required.
# The variable is an integer representing a bit string with the bits meaning:
#
# 0: GET
# 1: HEAD
# 2: PUT
# 3: DELETE
#
# NOTE: this variable can be injected via the environment
#
# [optional, defaults to 15 ]

#AUTH_METHODS=12

# QUERY_HACK changes the processing of query strings.
#
# If this variable exists the query string of a resource will be 
# interpreted as part of the file name, provided the resource 
# begins with the string in QUERY_HACK. 
#
# Example: assuming a request for a resource "index.html?sorted=yes".
# Normally the server will read the file "index.html". The query string
# "sorted=yes" will be omitted. If the resource is a CGI script the 
# query string will be passed in the environment string QUERY.
# With (for instance) QUERY_HACK=index, the processing will be 
# different and the server will read the file "index.html?sorted=yes".
#
# Note: this is a hack in violation of the HTTP specification. It is, 
# however, useful when you have mirrored dynamic resources using wget, 
# and wget has created fileNames containing the query part.
#
# Do not enable this option unless you know what you're doing.
# 
# [optional, hack not compiled in if missing]

#QUERY_HACK=/

# EOF

